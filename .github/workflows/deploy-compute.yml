# .github/workflows/deploy-compute.yml (replace your build/push/deploy steps with this)
name: Deploy Compute to Cloud Run

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

concurrency:
  group: deploy-compute
  cancel-in-progress: true

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  SERVICE_NAME: goldmind-compute
  IMAGE: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/goldmind/compute:${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Authenticate to GCP with the SA key you added
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true

      # Make sure Artifact Registry repo exists (idempotent)
      - name: Ensure Artifact Registry repo exists
        run: |
          set -e
          REPO_NAME="goldmind"
          gcloud artifacts repositories describe "$REPO_NAME" --location="$REGION" >/dev/null 2>&1 || \
          gcloud artifacts repositories create "$REPO_NAME" \
            --repository-format=docker \
            --location="$REGION" \
            --description="GoldMIND images"

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev -q

      # >>>>>> THE IMPORTANT CHANGE: use compute/ as the build context
      - name: Build image (Dockerfile in compute/, context = compute/)
        run: |
          docker build -t "$IMAGE" -f Dockerfile .
        working-directory: compute

      - name: Push image
        run: docker push "$IMAGE"

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy "$SERVICE_NAME" \
            --region "$REGION" \
            --platform managed \
            --image "$IMAGE" \
            --allow-unauthenticated \
            --quiet

      - name: Verify /health
        run: |
          URL=$(gcloud run services describe "$SERVICE_NAME" --region "$REGION" --format='value(status.url)')
          echo "Service URL: $URL"
          for i in {1..30}; do
            curl -fsS "$URL/health" && exit 0 || true
            sleep 5
          done
          echo "Health check failed"; curl -i "$URL/health" || true; exit 1
