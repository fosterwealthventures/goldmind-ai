name: Deploy to Cloud Run
on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_REGION: ${{ secrets.GCP_REGION }}
      GCP_SERVICE: ${{ secrets.GCP_SERVICE }}
      CLOUD_RUN_DOMAIN: ${{ secrets.CLOUD_RUN_DOMAIN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Manual gcloud auth (JSON key from secret)
        run: |
          set -euo pipefail
          echo '${{ secrets.GCP_SA_KEY }}' > "$HOME/key.json"
          # sanity-check JSON and show which account is inside (no secrets printed)
          python - <<'PY'
          import json, os
          p = os.path.expanduser(os.path.join(os.environ['HOME'],'key.json'))
          with open(p) as f: data = json.load(f)
          print("Loaded SA key for:", data.get("client_email","<missing>"))
          PY
          gcloud auth activate-service-account --key-file="$HOME/key.json"
          gcloud config set project "$GCP_PROJECT_ID"
          echo ">> Active gcloud account:"
          gcloud auth list --filter=status:ACTIVE --format="value(account)"
          # hard fail if no active account
          test -n "$(gcloud auth list --filter=status:ACTIVE --format='value(account)')" || (echo 'No active account' && exit 1)

      - name: Enable required APIs
        run: |
          gcloud services enable run.googleapis.com cloudbuild.googleapis.com artifactregistry.googleapis.com

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy "$GCP_SERVICE" \
            --source . \
            --region "$GCP_REGION" \
            --project "$GCP_PROJECT_ID" \
            --allow-unauthenticated

      - name: Smoke test (use service URL if DOMAIN not set)
        run: |
          set -euo pipefail
          URL="${CLOUD_RUN_DOMAIN:-}"
          if [ -z "$URL" ]; then
            URL="$(gcloud run services describe "$GCP_SERVICE" --region "$GCP_REGION" --format='value(status.url)')"
          fi
          echo "Testing $URL"
          (curl -fsS "$URL/health" || curl -fsS "$URL") >/dev/null
          echo "âœ… Smoke test passed for $URL"
