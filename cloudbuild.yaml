# Cloud Build for GoldMIND AI â€” builds & deploys API + Compute to Cloud Run
# - Separate build contexts: api/ and compute/
# - Uses Cloud SDK image for steps that need gcloud/curl
# - Grace wait after deploy
# - Health checks (blocking) + configurable smoke checks (warn-only)
# - Uploads service URLs as artifacts to GCS bucket: gs://${PROJECT_ID}-cloudbuild-artifacts/...

timeout: "1200s"

substitutions:
  _REGION: "us-central1"
  _REPO: "goldmind-api"                 # Artifact Registry repository (docker)
  _IMAGE_API: "goldmind-api"            # Image name for API
  _IMAGE_COMPUTE: "goldmind-compute"    # Image name for Compute
  _SERVICE_API: "goldmind-api"          # Cloud Run service (API)
  _SERVICE_COMPUTE: "goldmind-compute"  # Cloud Run service (Compute)
  _ENV: "prod"
  _GRACE_SECONDS: "45"
  _API_HEALTH_PATH: "/health"
  _COMPUTE_HEALTH_PATH: "/health"
  _CPU: "1"
  _MEM: "512Mi"
  _MIN_INSTANCES: "0"
  _MAX_INSTANCES: "4"
  _CONCURRENCY: "80"
  _PORT: "8080"
  # Adjust to your real public routes (space-separated). These are warn-only.
  _SMOKE_PATHS: "/api/summary /api/market/gold/spot /api/insights/structural"

options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # Build API (context = api/)
  - id: "build: api"
    name: "gcr.io/cloud-builders/docker"
    args:
      - build
      - --file=api/Dockerfile
      - --tag=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_API}:${SHORT_SHA}
      - --tag=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_API}:latest
      - api

  - id: "push: api (sha)"
    name: "gcr.io/cloud-builders/docker"
    args: ["push", "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_API}:${SHORT_SHA}"]

  - id: "push: api (latest)"
    name: "gcr.io/cloud-builders/docker"
    args: ["push", "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_API}:latest"]

  # Build Compute (context = compute/)
  - id: "build: compute"
    name: "gcr.io/cloud-builders/docker"
    args:
      - build
      - --file=compute/Dockerfile
      - --tag=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_COMPUTE}:${SHORT_SHA}
      - --tag=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_COMPUTE}:latest
      - compute

  - id: "push: compute (sha)"
    name: "gcr.io/cloud-builders/docker"
    args: ["push", "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_COMPUTE}:${SHORT_SHA}"]

  - id: "push: compute (latest)"
    name: "gcr.io/cloud-builders/docker"
    args: ["push", "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_COMPUTE}:latest"]

  # Deploy API
  - id: "deploy: api"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk:slim"
    entrypoint: bash
    args:
      - -c
      - |
        set -euo pipefail
        gcloud run deploy "${_SERVICE_API}" \
          --image="${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_API}:${SHORT_SHA}" \
          --region="${_REGION}" --platform=managed --allow-unauthenticated \
          --port="${_PORT}" --cpu="${_CPU}" --memory="${_MEM}" \
          --min-instances="${_MIN_INSTANCES}" --max-instances="${_MAX_INSTANCES}" \
          --concurrency="${_CONCURRENCY}" \
          --set-env-vars="ENV=${_ENV}" \
          --quiet

  # Deploy Compute
  - id: "deploy: compute"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk:slim"
    entrypoint: bash
    args:
      - -c
      - |
        set -euo pipefail
        gcloud run deploy "${_SERVICE_COMPUTE}" \
          --image="${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_COMPUTE}:${SHORT_SHA}" \
          --region="${_REGION}" --platform=managed --allow-unauthenticated \
          --port="${_PORT}" --cpu="${_CPU}" --memory="${_MEM}" \
          --min-instances="${_MIN_INSTANCES}" --max-instances="${_MAX_INSTANCES}" \
          --concurrency="${_CONCURRENCY}" \
          --set-env-vars="ENV=${_ENV}" \
          --quiet

  # Grace wait for rollout / cold start
  - id: "wait: grace"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk:slim"
    entrypoint: bash
    args: ["-c", "sleep ${_GRACE_SECONDS}"]

  # Resolve service URLs and persist as artifacts
  - id: "resolve: urls"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk:slim"
    entrypoint: bash
    args:
      - -c
      - |
        set -euo pipefail
        API_URL="$(gcloud run services describe "${_SERVICE_API}" --region "${_REGION}" --format='value(status.url)')"
        COMPUTE_URL="$(gcloud run services describe "${_SERVICE_COMPUTE}" --region "${_REGION}" --format='value(status.url)')"
        echo "API_URL=$API_URL" | tee api_url.txt
        echo "COMPUTE_URL=$COMPUTE_URL" | tee compute_url.txt

  # Health checks (blocking)
  - id: "health: api"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk:slim"
    entrypoint: bash
    args:
      - -c
      - |
        set -euo pipefail
        API_URL="$(sed 's/^API_URL=//' api_url.txt)"
        echo "Checking $API_URL${_API_HEALTH_PATH}"
        curl -fsS "$API_URL${_API_HEALTH_PATH}" | head -c 400

  - id: "health: compute"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk:slim"
    entrypoint: bash
    args:
      - -c
      - |
        set -euo pipefail
        COMPUTE_URL="$(sed 's/^COMPUTE_URL=//' compute_url.txt)"
        echo "Checking $COMPUTE_URL${_COMPUTE_HEALTH_PATH}"
        curl -fsS "$COMPUTE_URL${_COMPUTE_HEALTH_PATH}" | head -c 400

  # Smoke tests (warn-only; configure _SMOKE_PATHS)
  - id: "smoke: api (warn-only)"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk:slim"
    entrypoint: bash
    args:
      - -c
      - |
        set -eo pipefail
        API_URL="$(sed 's/^API_URL=//' api_url.txt)"
        SMOKE_PATHS="${_SMOKE_PATHS}"
        echo "Running smoke checks on: $SMOKE_PATHS"
        FAIL=0
        for p in $SMOKE_PATHS; do
          URL="$API_URL$p"
          CODE="$(curl -s -o /dev/null -w "%{http_code}" "$URL" || echo 000)"
          echo "SMOKE $p -> HTTP $CODE"
          if [ "$CODE" -ge 200 ] && [ "$CODE" -lt 400 ]; then :; else FAIL=1; fi
        done
        if [ "$FAIL" -ne 0 ]; then
          echo "Smoke warnings: one or more endpoints returned non-2xx. Continuing."
        fi

  # Summary
  - id: "summary"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk:slim"
    entrypoint: bash
    args:
      - -c
      - |
        set -euo pipefail
        echo "------ Deployment Summary ------"
        echo "Project: ${PROJECT_ID}"
        echo "Branch:  ${BRANCH_NAME}"
        echo "Commit:  ${COMMIT_SHA}"
        echo "Images:"
        echo "  API:     ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_API}:${SHORT_SHA}"
        echo "  Compute: ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_COMPUTE}:${SHORT_SHA}"
        API_URL="$(sed 's/^API_URL=//' api_url.txt)"
        COMPUTE_URL="$(sed 's/^COMPUTE_URL=//' compute_url.txt)"
        echo "API URL:      $API_URL"
        echo "Compute URL:  $COMPUTE_URL"
        echo "Environment:  ${_ENV}"
        echo "-------------------------------"

artifacts:
  objects:
    # Make sure this bucket exists and CB SA has storage.objectAdmin:
    #   gsutil mb -l us-central1 gs://${PROJECT_ID}-cloudbuild-artifacts
    #   gsutil iam ch serviceAccount:${PROJECT_NUMBER}@cloudbuild.gserviceaccount.com:roles/storage.objectAdmin gs://${PROJECT_ID}-cloudbuild-artifacts
    location: "gs://${PROJECT_ID}-cloudbuild-artifacts/goldmind/${BRANCH_NAME}/${SHORT_SHA}"
    paths:
      - "api_url.txt"
      - "compute_url.txt"

images:
  - "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_API}:${SHORT_SHA}"
  - "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_API}:latest"
  - "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_COMPUTE}:${SHORT_SHA}"
  - "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_COMPUTE}:latest"
