# cloudbuild.yaml
# Build & deploy GoldMIND API to Cloud Run, then smoke-test and print a summary.

substitutions:
<<<<<<< HEAD
  # ---- You can override these in your Trigger if desired ----
  _REGION: us-central1
  _SERVICE: goldmind-api
  _AR_REPO: goldmind                                  # Artifact Registry repo name
  _IMAGE: us-central1-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/api:${SHORT_SHA}

  # Optional URLs (kept as valid custom subs). Safe if unused thanks to ALLOW_LOOSE.
=======
  _REGION: us-central1
  _SERVICE: goldmind-api
  _AR_REPO: goldmind
  _IMAGE: us-central1-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/api:${SHORT_SHA}

  # Optional (safe if unused due to ALLOW_LOOSE)
>>>>>>> 8ea92db (CI/CD: Cloud Build deploy + smoke; underscore subs; remove REG_HOST)
  _API_URL: https://api.fwvgoldmindai.com
  _COMPUTE_URL: https://goldmind-api-884387776097.us-central1.run.app

options:
  substitutionOption: ALLOW_LOOSE
  machineType: E2_HIGHCPU_8
  logging: CLOUD_LOGGING_ONLY

timeout: "1200s"

steps:
  # 1) Configure Docker to push to Artifact Registry
  - id: "auth: configure docker for AR"
    name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    entrypoint: bash
    args:
      - -c
      - |
        set -e
<<<<<<< HEAD
        REG_HOST="$(echo "$_IMAGE" | awk -F/ '{print $1}')"
        gcloud auth configure-docker "$REG_HOST" -q
=======
        gcloud auth configure-docker "$(echo "$_IMAGE" | awk -F/ '{print $1}')" -q
>>>>>>> 8ea92db (CI/CD: Cloud Build deploy + smoke; underscore subs; remove REG_HOST)

  # 2) Build the image (Dockerfile in api/)
  - id: "build: docker image"
    name: gcr.io/cloud-builders/docker
    args:
      - build
      - --file=api/Dockerfile
      - --tag=$_IMAGE
      - .

  # 3) Push the image
  - id: "push: artifact registry"
    name: gcr.io/cloud-builders/docker
    args: ["push", "$_IMAGE"]

  # 4) Deploy to Cloud Run
  - id: "deploy: cloud run"
    name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    entrypoint: bash
    args:
      - -c
      - |
        set -euo pipefail
        gcloud run deploy "$_SERVICE" \
          --region "$_REGION" \
          --platform managed \
          --image "$_IMAGE" \
          --allow-unauthenticated

        URL="$(gcloud run services describe "$_SERVICE" --region "$_REGION" --format='value(status.url)')"
        echo "SERVICE_URL=${URL}" > /workspace/deploy.env
        echo "IMAGE=$_IMAGE" >> /workspace/deploy.env

  # 5) Wait for rollout readiness via /health
  - id: "wait: /health ready"
    name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    entrypoint: bash
    args:
      - -c
      - |
        set -euo pipefail
        source /workspace/deploy.env
        echo "Waiting for service to pass /health ..."
        for i in {1..30}; do
          if curl -fsS "${SERVICE_URL}/health" >/dev/null 2>&1; then
            echo "Health check OK"
            exit 0
          fi
          sleep 5
        done
        echo "Health check FAILED (timeout)"
        curl -i "${SERVICE_URL}/health" || true
        exit 1

<<<<<<< HEAD
  # 6) Smoke tests (script lives at repo root: ./smoke.sh)
=======
  # 6) Smoke tests (script at repo root: scripts/smoke.sh)
>>>>>>> 8ea92db (CI/CD: Cloud Build deploy + smoke; underscore subs; remove REG_HOST)
  - id: "test: smoke"
    name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    entrypoint: bash
    args:
      - -c
      - |
        set -euo pipefail
        source /workspace/deploy.env
<<<<<<< HEAD
        chmod +x smoke.sh
        apt-get update >/dev/null && apt-get install -y --no-install-recommends jq >/dev/null
        ./smoke.sh "${SERVICE_URL}"   # or use "${_API_URL}" if you prefer the custom domain
=======
        chmod +x scripts/smoke.sh
        apt-get update >/dev/null && apt-get install -y --no-install-recommends jq >/dev/null
        ./scripts/smoke.sh "${SERVICE_URL}"   # or "${_API_URL}" if you prefer the custom domain
>>>>>>> 8ea92db (CI/CD: Cloud Build deploy + smoke; underscore subs; remove REG_HOST)

  # 7) Summary
  - id: "summary"
    name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    entrypoint: bash
    args:
      - -c
      - |
        source /workspace/deploy.env
        echo "--------------------------------------------------"
        echo " GoldMIND API â€“ Deploy Summary"
        echo " Project:     ${PROJECT_ID}"
        echo " Region:      ${_REGION}"
        echo " Service:     ${_SERVICE}"
        echo " Service URL: ${SERVICE_URL}"
        echo " Image:       ${IMAGE}"
        echo " API URL:     ${_API_URL}"
        echo " Compute URL: ${_COMPUTE_URL}"
        echo "--------------------------------------------------"

images:
  - "$_IMAGE"
