# CI/CD: Build + Push + Deploy API & Compute (Cloud Run Gen2)
# Includes structured-logging smoke tests with grace-period retries, run in parallel.

substitutions:
  _REGION: "us-central1"
  _AR_REPO: "goldmind"
  _SERVICE_API: "goldmind-api"
  _SERVICE_COMPUTE: "goldmind-compute"
  _API_DOMAIN: "https://api.fwvgoldmindai.com"
  _ENV: "prod"
  _USE_YFINANCE: "true"

options:
  logging: CLOUD_LOGGING_ONLY
  substitution_option: ALLOW_LOOSE

steps:
  # --- Build ---
  - name: gcr.io/cloud-builders/docker
    id: Build API image
    args:
      - build
      - -t
      - ${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_API}:$COMMIT_SHA
      - -f
      - ./api/Dockerfile
      - ./api

  - name: gcr.io/cloud-builders/docker
    id: Build Compute image
    args:
      - build
      - -t
      - ${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_COMPUTE}:$COMMIT_SHA
      - -f
      - ./compute/Dockerfile
      - ./compute

  # --- Push ---
  - name: gcr.io/cloud-builders/docker
    id: Push API image
    args: [ "push", "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_API}:$COMMIT_SHA" ]

  - name: gcr.io/cloud-builders/docker
    id: Push Compute image
    args: [ "push", "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_COMPUTE}:$COMMIT_SHA" ]

  # --- Deploy (Cloud Run Gen2) ---
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    id: Deploy API
    entrypoint: gcloud
    args:
      - run
      - deploy
      - ${_SERVICE_API}
      - --image=${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_API}:$COMMIT_SHA
      - --region=${_REGION}
      - --platform=managed
      - --allow-unauthenticated
      - --project=$PROJECT_ID
      - --quiet

  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    id: Deploy Compute
    entrypoint: gcloud
    args:
      - run
      - deploy
      - ${_SERVICE_COMPUTE}
      - --image=${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_COMPUTE}:$COMMIT_SHA
      - --region=${_REGION}
      - --platform=managed
      - --project=$PROJECT_ID
      - --quiet

  # --- Smoke Test: API with Grace Period (runs in parallel with Compute test) ---
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    id: Smoke Test API Health
    waitFor: ["Deploy API"]     # ← parallelize
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        URL="${_API_DOMAIN}/health"
        TS="$(date -Iseconds)"
        echo "Smoke testing API at $URL ..."
        for i in {1..12}; do
          RESP="$(curl -sS -m 10 -w ' HTTP_STATUS:%{http_code}' "$URL" || true)"
          STATUS="${RESP##*HTTP_STATUS:}"
          BODY="${RESP% HTTP_STATUS:*}"
          BODY_B64="$(printf '%s' "$BODY" | base64 | tr -d '\n')"

          if [[ "$STATUS" == "200" ]]; then
            gcloud logging write deploy-smoke \
              "{\"service\":\"${_SERVICE_API}\",\"url\":\"$URL\",\"status\":$STATUS,\"ok\":true,\"ts\":\"$TS\",\"body_b64\":\"$BODY_B64\"}" \
              --payload-type=json --severity=INFO
            echo "API health OK (200)."
            exit 0
          fi
          echo "Attempt $i/12: API not ready (status=$STATUS). Retrying in 5s..."
          sleep 5
        done
        gcloud logging write deploy-smoke \
          "{\"service\":\"${_SERVICE_API}\",\"url\":\"$URL\",\"status\":\"fail\",\"ok\":false,\"ts\":\"$TS\"}" \
          --payload-type=json --severity=ERROR
        echo "API health FAILED after grace period."
        exit 1

  # --- Smoke Test: Compute with Grace Period (runs in parallel with API test) ---
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    id: Smoke Test Compute Health
    waitFor: ["Deploy Compute"] # ← parallelize
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        COMPUTE_URL="$(gcloud run services describe ${_SERVICE_COMPUTE} --region ${_REGION} --format 'value(status.url)')"
        URL="${COMPUTE_URL}/health"
        TS="$(date -Iseconds)"
        echo "Smoke testing Compute at $URL ..."
        for i in {1..12}; do
          RESP="$(curl -sS -m 10 -w ' HTTP_STATUS:%{http_code}' "$URL" || true)"
          STATUS="${RESP##*HTTP_STATUS:}"
          BODY="${RESP% HTTP_STATUS:*}"
          BODY_B64="$(printf '%s' "$BODY" | base64 | tr -d '\n')"

          if [[ "$STATUS" == "200" ]]; then
            gcloud logging write deploy-smoke \
              "{\"service\":\"${_SERVICE_COMPUTE}\",\"url\":\"$URL\",\"status\":$STATUS,\"ok\":true,\"ts\":\"$TS\",\"body_b64\":\"$BODY_B64\"}" \
              --payload-type=json --severity=INFO
            echo "Compute health OK (200)."
            exit 0
          fi
          echo "Attempt $i/12: Compute not ready (status=$STATUS). Retrying in 5s..."
          sleep 5
        done
        gcloud logging write deploy-smoke \
          "{\"service\":\"${_SERVICE_COMPUTE}\",\"url\":\"$URL\",\"status\":\"fail\",\"ok\":false,\"ts\":\"$TS\"}" \
          --payload-type=json --severity=ERROR
        echo "Compute health FAILED after grace period."
        exit 1
