# Cloud Build for GoldMIND AI â€” API + Compute
# Safe YAML: single 'steps' block, 2-space indents, quote values with ':'.

timeout: "1200s"

substitutions:
  _REGION: "us-central1"
  _REPO: "goldmind-api"                 # Artifact Registry (Docker) repo
  _IMAGE_API: "goldmind-api"            # API image name
  _IMAGE_COMPUTE: "goldmind-compute"    # Compute image name
  _SERVICE_API: "goldmind-api"          # Cloud Run service (API)
  _SERVICE_COMPUTE: "goldmind-compute"  # Cloud Run service (Compute)
  _ENV: "prod"
  _GRACE_SECONDS: "45"
  _API_HEALTH_PATH: "/health"
  _COMPUTE_HEALTH_PATH: "/health"
  _CPU: "1"
  _MEM: "512Mi"
  _MIN_INSTANCES: "0"
  _MAX_INSTANCES: "4"
  _CONCURRENCY: "80"
  _PORT: "8080"

options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # 0) Context
  - id: "context: show env"
    name: "bash"
    entrypoint: "bash"
    args:
      - "-euxo"
      - "pipefail"
      - "-c"
      - |
        echo "PROJECT_ID=${PROJECT_ID}"
        echo "BRANCH_NAME=${BRANCH_NAME}"
        echo "SHORT_SHA=${SHORT_SHA}"
        echo "_REGION=${_REGION} _ENV=${_ENV}"
        echo "_SERVICE_API=${_SERVICE_API} _SERVICE_COMPUTE=${_SERVICE_COMPUTE}"

  # 1) Build API image (api/Dockerfile)
  - id: "build: api"
    name: "gcr.io/cloud-builders/docker"
    args:
      - "build"
      - "--file=api/Dockerfile"
      - "--tag=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_API}:${SHORT_SHA}"
      - "--tag=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_API}:latest"
      - "."

  - id: "push: api (sha)"
    name: "gcr.io/cloud-builders/docker"
    args: ["push", "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_API}:${SHORT_SHA}"]

  - id: "push: api (latest)"
    name: "gcr.io/cloud-builders/docker"
    args: ["push", "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_API}:latest"]

  # 2) Build Compute image (compute/Dockerfile)
  - id: "build: compute"
    name: "gcr.io/cloud-builders/docker"
    args:
      - "build"
      - "--file=compute/Dockerfile"
      - "--tag=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_COMPUTE}:${SHORT_SHA}"
      - "--tag=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_COMPUTE}:latest"
      - "."

  - id: "push: compute (sha)"
    name: "gcr.io/cloud-builders/docker"
    args: ["push", "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_COMPUTE}:${SHORT_SHA}"]

  - id: "push: compute (latest)"
    name: "gcr.io/cloud-builders/docker"
    args: ["push", "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_COMPUTE}:latest"]

  # 3) Deploy API
  - id: "deploy: api"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk:slim"
    entrypoint: "bash"
    args:
      - "-euxo"
      - "pipefail"
      - "-c"
      - |
        gcloud run deploy "${_SERVICE_API}" \
          --image="${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_API}:${SHORT_SHA}" \
          --region="${_REGION}" --platform=managed --allow-unauthenticated \
          --port="${_PORT}" --cpu="${_CPU}" --memory="${_MEM}" \
          --min-instances="${_MIN_INSTANCES}" --max-instances="${_MAX_INSTANCES}" \
          --concurrency="${_CONCURRENCY}" --set-env-vars="ENV=${_ENV}" --quiet

  # 4) Deploy Compute
  - id: "deploy: compute"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk:slim"
    entrypoint: "bash"
    args:
      - "-euxo"
      - "pipefail"
      - "-c"
      - |
        gcloud run deploy "${_SERVICE_COMPUTE}" \
          --image="${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_COMPUTE}:${SHORT_SHA}" \
          --region="${_REGION}" --platform=managed --allow-unauthenticated \
          --port="${_PORT}" --cpu="${_CPU}" --memory="${_MEM}" \
          --min-instances="${_MIN_INSTANCES}" --max-instances="${_MAX_INSTANCES}" \
          --concurrency="${_CONCURRENCY}" --set-env-vars="ENV=${_ENV}" --quiet

  # 5) Grace period
  - id: "wait: grace"
    name: "bash"
    entrypoint: "bash"
    args: ["-c", "sleep ${_GRACE_SECONDS}"]

  # 6) Resolve URLs and persist
  - id: "resolve: urls"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk:slim"
    entrypoint: "bash"
    args:
      - "-euxo"
      - "pipefail"
      - "-c"
      - |
        API_URL="$(gcloud run services describe "${_SERVICE_API}" --region "${_REGION}" --format='value(status.url)')"
        COMPUTE_URL="$(gcloud run services describe "${_SERVICE_COMPUTE}" --region "${_REGION}" --format='value(status.url)')"
        echo "API_URL=$${API_URL}" | tee api_url.txt
        echo "COMPUTE_URL=$${COMPUTE_URL}" | tee compute_url.txt

  # 7) Health checks
  - id: "health: api"
    name: "bash"
    entrypoint: "bash"
    args:
      - "-euxo"
      - "pipefail"
      - "-c"
      - |
        API_URL="$(sed 's/^API_URL=//' api_url.txt)"
        curl -fsS "$${API_URL}${_API_HEALTH_PATH}" | head -c 400

  - id: "health: compute"
    name: "bash"
    entrypoint: "bash"
    args:
      - "-euxo"
      - "pipefail"
      - "-c"
      - |
        COMPUTE_URL="$(sed 's/^COMPUTE_URL=//' compute_url.txt)"
        curl -fsS "$${COMPUTE_URL}${_COMPUTE_HEALTH_PATH}" | head -c 400

  # 8) Smoke tests (adjust endpoints if different)
  - id: "smoke: api"
    name: "bash"
    entrypoint: "bash"
    args:
      - "-euxo"
      - "pipefail"
      - "-c"
      - |
        API_URL="$(sed 's/^API_URL=//' api_url.txt)"
        curl -fsS "$${API_URL}/api/summary" | head -c 400
        curl -fsS "$${API_URL}/api/market/gold/spot" | head -c 400
        curl -fsS "$${API_URL}/api/insights/structural" | head -c 400

  # 9) Summary
  - id: "summary"
    name: "bash"
    entrypoint: "bash"
    args:
      - "-euxo"
      - "pipefail"
      - "-c"
      - |
        echo "------ Deployment Summary ------"
        echo "Project: ${PROJECT_ID}"
        echo "Branch:  ${BRANCH_NAME}"
        echo "Commit:  ${COMMIT_SHA}"
        echo "Images:"
        echo "  API:     ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_API}:${SHORT_SHA}"
        echo "  Compute: ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_COMPUTE}:${SHORT_SHA}"
        API_URL="$(sed 's/^API_URL=//' api_url.txt)"
        COMPUTE_URL="$(sed 's/^COMPUTE_URL=//' compute_url.txt)"
        echo "API URL:      $${API_URL}"
        echo "Compute URL:  $${COMPUTE_URL}"
        echo "Environment:  ${_ENV}"
        echo "-------------------------------"

artifacts:
  objects:
    location: "gs://${PROJECT_ID}-cloudbuild-artifacts/goldmind/${BRANCH_NAME}/${SHORT_SHA}"
    paths:
      - "api_url.txt"
      - "compute_url.txt"

images:
  - "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_API}:${SHORT_SHA}"
  - "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_API}:latest"
  - "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_COMPUTE}:${SHORT_SHA}"
  - "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO}/${_IMAGE_COMPUTE}:latest"
